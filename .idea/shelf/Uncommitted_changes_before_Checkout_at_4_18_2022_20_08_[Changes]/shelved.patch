Index: src/main/scala/ppm/Main.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.scala.ppm\r\n\r\nimport javafx.application.Application\r\nimport javafx.geometry.{Insets, Pos}\r\nimport javafx.scene._\r\nimport javafx.scene.layout.StackPane\r\nimport javafx.scene.paint.{Color, PhongMaterial}\r\nimport javafx.scene.shape._\r\nimport javafx.scene.transform.Rotate\r\nimport javafx.stage.Stage\r\n\r\nimport scala.annotation.tailrec\r\nimport scala.io.Source\r\n\r\n\r\nclass Main extends Application {\r\n\r\n  //Auxiliary types\r\n  type Point = (Double, Double, Double)\r\n  type Size = Double\r\n  type Placement = (Point, Size) //1st point: origin, 2nd point: size\r\n\r\n  //Shape3D is an abstract class that extends javafx.scene.Node\r\n  //Box and Cylinder are subclasses of Shape3D\r\n  type Section = (Placement, List[Node])  //example: ( ((0.0,0.0,0.0), 2.0), List(new Cylinder(0.5, 1, 10)))\r\n\r\n  /*\r\n    Additional information about JavaFX basic concepts (e.g. Stage, Scene) will be provided in week7\r\n   */\r\n  override def start(stage: Stage): Unit = {\r\n\r\n    //Get and print program arguments (args: Array[String])\r\n    val params = getParameters\r\n    println(\"Program arguments:\" + params.getRaw)\r\n\r\n    //Materials to be applied to the 3D objects\r\n    val redMaterial = new PhongMaterial()\r\n    redMaterial.setDiffuseColor(Color.rgb(150,0,0))\r\n\r\n    val greenMaterial = new PhongMaterial()\r\n    greenMaterial.setDiffuseColor(Color.rgb(0,255,0))\r\n\r\n    val blueMaterial = new PhongMaterial()\r\n    blueMaterial.setDiffuseColor(Color.rgb(0,0,150))\r\n\r\n    val blackMaterial = new PhongMaterial()\r\n    blackMaterial.setDiffuseColor(Color.rgb(0,0,0))\r\n\r\n    //3D objects\r\n    val lineX = new Line(0, 0, 200, 0)\r\n    lineX.setStroke(Color.GREEN)\r\n\r\n    val lineY = new Line(0, 0, 0, 200)\r\n    lineY.setStroke(Color.YELLOW)\r\n\r\n    val lineZ = new Line(0, 0, 200, 0)\r\n    lineZ.setStroke(Color.LIGHTSALMON)\r\n    lineZ.getTransforms().add(new Rotate(-90, 0, 0, 0, Rotate.Y_AXIS))\r\n\r\n    val camVolume = new Cylinder(10, 50, 10)\r\n    camVolume.setTranslateX(1)\r\n    camVolume.getTransforms().add(new Rotate(45, 0, 0, 0, Rotate.X_AXIS))\r\n    camVolume.setMaterial(blueMaterial)\r\n    camVolume.setDrawMode(DrawMode.LINE)\r\n\r\n    val wiredBox = new Box(32, 32, 32)\r\n    wiredBox.setTranslateX(16)\r\n    wiredBox.setTranslateY(16)\r\n    wiredBox.setTranslateZ(16)\r\n    wiredBox.setMaterial(redMaterial)\r\n    wiredBox.setDrawMode(DrawMode.LINE)\r\n\r\n    val cylinder1 = new Cylinder(0.5, 1, 10)\r\n    cylinder1.setTranslateX(2)\r\n    cylinder1.setTranslateY(2)\r\n    cylinder1.setTranslateZ(2)\r\n    cylinder1.setScaleX(2)\r\n    cylinder1.setScaleY(2)\r\n    cylinder1.setScaleZ(2)\r\n    cylinder1.setMaterial(greenMaterial)\r\n\r\n    val box1 = new Box(1, 1, 1)  //\r\n    box1.setTranslateX(5)\r\n    box1.setTranslateY(5)\r\n    box1.setTranslateZ(5)\r\n    box1.setMaterial(greenMaterial)\r\n\r\n    // 3D objects (group of nodes - javafx.scene.Node) that will be provide to the subScene\r\n    val worldRoot:Group = new Group(wiredBox, camVolume, lineX, lineY, lineZ)\r\n\r\n    // Camera\r\n    val camera = new PerspectiveCamera(true)\r\n\r\n    val cameraTransform = new CameraTransformer\r\n    cameraTransform.setTranslate(0, 0, 0)\r\n    cameraTransform.getChildren.add(camera)\r\n    camera.setNearClip(0.1)\r\n    camera.setFarClip(10000.0)\r\n\r\n    camera.setTranslateZ(-500)\r\n    camera.setFieldOfView(20)\r\n    cameraTransform.ry.setAngle(-45.0)\r\n    cameraTransform.rx.setAngle(-45.0)\r\n    worldRoot.getChildren.add(cameraTransform)\r\n\r\n    // SubScene - composed by the nodes present in the worldRoot\r\n    val subScene = new SubScene(worldRoot, 800, 600, true, SceneAntialiasing.BALANCED)\r\n    subScene.setFill(Color.DARKSLATEGRAY)\r\n    subScene.setCamera(camera)\r\n\r\n    // main.scala.ppm.CameraView - an additional perspective of the environment\r\n    val cameraView = new CameraView(subScene)\r\n    cameraView.setFirstPersonNavigationEabled(true)\r\n    cameraView.setFitWidth(350)\r\n    cameraView.setFitHeight(225)\r\n    cameraView.getRx.setAngle(-45)\r\n    cameraView.getT.setZ(-100)\r\n    cameraView.getT.setY(-500)\r\n    cameraView.getCamera.setTranslateZ(-50)\r\n    cameraView.startViewing\r\n\r\n      // Position of the main.scala.ppm.CameraView: Right-bottom corner\r\n      StackPane.setAlignment(cameraView, Pos.BOTTOM_RIGHT)\r\n      StackPane.setMargin(cameraView, new Insets(5))\r\n\r\n    // Scene - defines what is rendered (in this case the subScene and the cameraView)\r\n    val root = new StackPane(subScene, cameraView)\r\n    subScene.widthProperty.bind(root.widthProperty)\r\n    subScene.heightProperty.bind(root.heightProperty)\r\n\r\n    val scene = new Scene(root, 810, 610, true, SceneAntialiasing.BALANCED)\r\n\r\n    //T3 - tornar funcional esta função\r\n    def changeColor(): Unit = {\r\n      worldRoot.getChildren.forEach(n=> {\r\n        if(n.isInstanceOf[Shape3D] && !n.asInstanceOf[Shape3D].getBoundsInParent.intersects(camVolume.getBoundsInParent)) {\r\n          n.asInstanceOf[Shape3D].setMaterial(blackMaterial)\r\n        }\r\n      })\r\n    }\r\n\r\n    //Mouse left click interaction\r\n    scene.setOnMouseClicked((event) => {\r\n      camVolume.setTranslateX(camVolume.getTranslateX + 2)\r\n      worldRoot.getChildren.removeAll()\r\n      changeColor()\r\n\r\n    })\r\n\r\n    //setup and start the Stage\r\n    stage.setTitle(\"PPM Project 21/22\")\r\n    stage.setScene(scene)\r\n    stage.show\r\n\r\n\r\n    //T1\r\n    def getShapesFromList(lst: List[String]): List[Shape3D] = {\r\n      lst match {\r\n        case Nil => Nil\r\n        case x::tail => {\r\n          val elem = x.split(\" \")\r\n          val rgb = elem(1).replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\r\n          val color = new PhongMaterial()\r\n          color.setDiffuseColor(Color.rgb(rgb(0).toInt, rgb(1).toInt, rgb(2).toInt))\r\n          val transXYZ = (elem(2).toDouble, elem(3).toDouble, elem(4).toDouble)\r\n          val scaleXYZ = (elem(5).toDouble, elem(6).toDouble, elem(7).toDouble)\r\n          elem(0).toLowerCase() match {\r\n            case \"cylinder\" => {\r\n              val cylinder = new Cylinder(0.5, 1, 10)\r\n              cylinder.setTranslateX(transXYZ._1)\r\n              cylinder.setTranslateY(transXYZ._2)\r\n              cylinder.setTranslateZ(transXYZ._3)\r\n              cylinder.setScaleX(scaleXYZ._1)\r\n              cylinder.setScaleY(scaleXYZ._2)\r\n              cylinder.setScaleZ(scaleXYZ._3)\r\n              cylinder.setMaterial(color)\r\n              cylinder.setDrawMode(DrawMode.LINE)\r\n              printShape(cylinder)\r\n              worldRoot.getChildren.add(cylinder)\r\n              cylinder::getShapesFromList(tail)\r\n            }\r\n            case \"cube\" => {\r\n              val box = new Box(1, 1, 1)\r\n              box.setTranslateX(transXYZ._1)\r\n              box.setTranslateY(transXYZ._2)\r\n              box.setTranslateZ(transXYZ._3)\r\n              box.setScaleX(scaleXYZ._1)\r\n              box.setScaleY(scaleXYZ._2)\r\n              box.setScaleZ(scaleXYZ._3)\r\n              box.setMaterial(color)\r\n              box.setDrawMode(DrawMode.LINE)\r\n              printShape(box)\r\n              worldRoot.getChildren.add(box)\r\n              box::getShapesFromList(tail)\r\n\r\n            }\r\n            case _ => {\r\n              getShapesFromList(tail)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    //T1\r\n    def createShapesFromFile(file: String): List[Shape3D] = {\r\n      val lines = Source.fromFile(file).getLines().toList\r\n      val shapes: List[Shape3D] = getShapesFromList(lines)\r\n      shapes\r\n\r\n    }\r\n\r\n    //TODO - usar nome do ficheiro que será enviado pelo terminal\r\n    val shapesList = createShapesFromFile(\"config.txt\")\r\n\r\n\r\n\r\n    //oct1 - example of an main.scala.ppm.Octree[Placement] that contains only one Node (i.e. cylinder1)\r\n    //In case of difficulties to implement task T2 this octree can be used as input for tasks T3, T4 and T5\r\n\r\n    val placement1: Placement = ((0, 0, 0), 8.0)\r\n    val sec1: Section = (((0.0,0.0,0.0), 4.0), List(cylinder1.asInstanceOf[Node]))\r\n    val ocLeaf1 = main.scala.ppm.OcLeaf(sec1)\r\n    val oct1:main.scala.ppm.Octree[Placement] = main.scala.ppm.OcNode[Placement](placement1, ocLeaf1, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty)\r\n\r\n    //T4\r\n    def scaleOctree(fact:Double, oct:Octree[Placement]):Octree[Placement] = {\r\n      def scaleShapes(shapes: List[Shape3D]) = {\r\n        shapes match {\r\n          case Nil => \"\"\r\n          case x::tail => {\r\n            x.setTranslateX(x.getTranslateX * fact)\r\n            x.setTranslateY(x.getTranslateY * fact)\r\n            x.setTranslateZ(x.getTranslateZ * fact)\r\n            x.setScaleX(x.getScaleX * fact)\r\n            x.setScaleY(x.getScaleY * fact)\r\n            x.setScaleZ(x.getScaleZ * fact)\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n      def aux[A](oct:Octree[Placement]):Octree[Placement] = {\r\n        oct match {\r\n          case OcEmpty => OcEmpty\r\n          case OcLeaf(section) => {\r\n            val sec = section.asInstanceOf[Section]\r\n            val newSection = ((sec._1._1._1 * fact, sec._1._1._2 * fact, sec._1._1._3 * fact, sec._1._2 * fact), sec._2)\r\n            scaleShapes(section.asInstanceOf[Section]._2.asInstanceOf[List[Shape3D]])\r\n            OcLeaf(newSection)\r\n          }\r\n          case OcNode(coords, up_00, up_01, up_10, up_11, down_00, down_01, down_10, down_11) => {\r\n            val newCoords = ((coords._1._1 * fact, coords._1._2 * fact, coords._1._3 * fact), coords._2 * fact)\r\n            OcNode(newCoords, aux(up_00), aux(up_01), aux(up_10), aux(up_11), aux(down_00), aux(down_01), aux(down_10), aux(down_11))\r\n          }\r\n        }\r\n      }\r\n      aux(oct)\r\n    }\r\n\r\n    /*\r\n    //example of bounding boxes (corresponding to the octree oct1) added manually to the world\r\n    val b2 = new Box(8,8,8)\r\n    //translate because it is added by defaut to the coords (0,0,0)\r\n    b2.setTranslateX(8/2)\r\n    b2.setTranslateY(8/2)\r\n    b2.setTranslateZ(8/2)\r\n    b2.setMaterial(redMaterial)\r\n    b2.setDrawMode(DrawMode.LINE)\r\n\r\n    val b3 = new Box(4,4,4)\r\n    //translate because it is added by defaut to the coords (0,0,0)\r\n    b3.setTranslateX(4/2)\r\n    b3.setTranslateY(4/2)\r\n    b3.setTranslateZ(4/2)\r\n    b3.setMaterial(redMaterial)\r\n    b3.setDrawMode(DrawMode.LINE)\r\n\r\n    //adding boxes b2 and b3 to the world\r\n    worldRoot.getChildren.add(b2)\r\n    worldRoot.getChildren.add(b3)\r\n*/\r\n  }\r\n\r\n  override def init(): Unit = {\r\n    println(\"init\")\r\n  }\r\n\r\n  override def stop(): Unit = {\r\n    println(\"stopped\")\r\n  }\r\n\r\n  // Serve para testes\r\n  def printOctTree[A](octree: Octree[A]): Unit = {\r\n    octree match {\r\n      case OcEmpty => \"\"\r\n      case OcNode(coords, up_00, up_01, up_10, up_11, down_00, down_01, down_10, down_11) => {\r\n        printOctTree(up_00)\r\n        printOctTree(up_01)\r\n        printOctTree(up_10)\r\n        printOctTree(up_11)\r\n        printOctTree(down_00)\r\n        printOctTree(down_01)\r\n        printOctTree(down_10)\r\n        printOctTree(down_11)\r\n      }\r\n      case OcLeaf(section) => {\r\n        printShapesList(section.asInstanceOf[Section]._2)\r\n      }\r\n    }\r\n  }\r\n\r\n  def printShapesList(shapes: List[Node]): Unit = {\r\n    shapes match {\r\n      case Nil => \"\"\r\n      case x::tail => {\r\n        printShape(x.asInstanceOf[Shape3D])\r\n        printShapesList(tail)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Serve para testes\r\n  def printShape(shape: Shape3D): Unit = {\r\n    println(s\"Class: ${shape.getClass}, ${shape.getTranslateX}, ${shape.getTranslateY}, ${shape.getTranslateZ}, ${shape.getScaleX}, ${shape.getScaleY}, ${shape.getScaleZ}\")\r\n  }\r\n\r\n}\r\n\r\nobject FxApp {\r\n\r\n  def main(args: Array[String]): Unit = {\r\n    Application.launch(classOf[Main], args: _*)\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/ppm/Main.scala b/src/main/scala/ppm/Main.scala
--- a/src/main/scala/ppm/Main.scala	
+++ b/src/main/scala/ppm/Main.scala	
@@ -43,8 +43,8 @@
     val blueMaterial = new PhongMaterial()
     blueMaterial.setDiffuseColor(Color.rgb(0,0,150))
 
-    val blackMaterial = new PhongMaterial()
-    blackMaterial.setDiffuseColor(Color.rgb(0,0,0))
+    val whiteMaterial = new PhongMaterial()
+    whiteMaterial.setDiffuseColor(Color.rgb(255,255,255))
 
     //3D objects
     val lineX = new Line(0, 0, 200, 0)
@@ -134,7 +134,7 @@
     def changeColor(): Unit = {
       worldRoot.getChildren.forEach(n=> {
         if(n.isInstanceOf[Shape3D] && !n.asInstanceOf[Shape3D].getBoundsInParent.intersects(camVolume.getBoundsInParent)) {
-          n.asInstanceOf[Shape3D].setMaterial(blackMaterial)
+          n.asInstanceOf[Shape3D].setMaterial(whiteMaterial)
         }
       })
     }
@@ -152,13 +152,33 @@
     stage.setScene(scene)
     stage.show
 
+    //TODO - criar uma função para verificar se o objeto que estamos a criar está a colidir com algum já existente
+    /*
+    def objectIntersects(shape: Node): Boolean = {
+      def aux(shape: Node, list: List[Node]): Boolean = {
+        list match {
+          case Nil => false
+          case x::tail => {
+            if (shape.asInstanceOf[Shape3D].intersects(x.asInstanceOf[Shape3D].getBoundsInParent))
+              true
+            else
+              aux(shape, tail)
+          }
+        }
+      }
+    }
 
+     */
+
+    //TODO - tornar a criação dos objetos mais genérica
     //T1
     def getShapesFromList(lst: List[String]): List[Shape3D] = {
       lst match {
         case Nil => Nil
         case x::tail => {
           val elem = x.split(" ")
+          // (255,0,0)
+          // (255, 0, 0)
           val rgb = elem(1).replace("(", "").replace(")", "").split(",")
           val color = new PhongMaterial()
           color.setDiffuseColor(Color.rgb(rgb(0).toInt, rgb(1).toInt, rgb(2).toInt))
@@ -175,8 +195,10 @@
               cylinder.setScaleZ(scaleXYZ._3)
               cylinder.setMaterial(color)
               cylinder.setDrawMode(DrawMode.LINE)
-              printShape(cylinder)
-              worldRoot.getChildren.add(cylinder)
+              //printShape(cylinder)
+              if (worldRoot.getBoundsInParent.contains(cylinder.asInstanceOf[Shape3D].getBoundsInParent)) {
+                worldRoot.getChildren.add(cylinder)
+              }
               cylinder::getShapesFromList(tail)
             }
             case "cube" => {
@@ -189,8 +211,10 @@
               box.setScaleZ(scaleXYZ._3)
               box.setMaterial(color)
               box.setDrawMode(DrawMode.LINE)
-              printShape(box)
-              worldRoot.getChildren.add(box)
+              //printShape(box)
+              if (worldRoot.getBoundsInParent.contains(box.asInstanceOf[Shape3D].getBoundsInParent)) {
+                worldRoot.getChildren.add(box)
+              }
               box::getShapesFromList(tail)
 
             }
@@ -224,6 +248,7 @@
     val ocLeaf1 = main.scala.ppm.OcLeaf(sec1)
     val oct1:main.scala.ppm.Octree[Placement] = main.scala.ppm.OcNode[Placement](placement1, ocLeaf1, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty, main.scala.ppm.OcEmpty)
 
+
     //T4
     def scaleOctree(fact:Double, oct:Octree[Placement]):Octree[Placement] = {
       def scaleShapes(shapes: List[Shape3D]) = {
@@ -247,7 +272,7 @@
           case OcLeaf(section) => {
             val sec = section.asInstanceOf[Section]
             val newSection = ((sec._1._1._1 * fact, sec._1._1._2 * fact, sec._1._1._3 * fact, sec._1._2 * fact), sec._2)
-            scaleShapes(section.asInstanceOf[Section]._2.asInstanceOf[List[Shape3D]])
+            scaleShapes(sec._2.asInstanceOf[List[Shape3D]])
             OcLeaf(newSection)
           }
           case OcNode(coords, up_00, up_01, up_10, up_11, down_00, down_01, down_10, down_11) => {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8b0dcd76-f4b2-4401-b59f-7d8c67cba4d6\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/scala/ppm/Main.scala\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/scala/ppm/Main.scala\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"27bsvBhXMq5vc79PCfeiwdeFTu6\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"flattenPackages\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n    <option name=\"sortByType\" value=\"true\" />\r\n    <option name=\"useFileNestingRules\" value=\"false\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../../../Projetos de apoio/ProjetoPPM-master/ProjetoPPM-master\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.FxApp (1)\">\r\n    <configuration name=\"FxApp (1)\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.scala.ppm.FxApp\" />\r\n      <module name=\"PPM-Project\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.scala.ppm.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"FxApp\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.FxApp\" />\r\n      <module name=\"PPM-Project\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.scala.ppm.Main\" />\r\n      <module name=\"PPM-Project\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.FxApp (1)\" />\r\n        <item itemvalue=\"Application.FxApp\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8b0dcd76-f4b2-4401-b59f-7d8c67cba4d6\" name=\"Changes\" comment=\"\" />\r\n      <created>1649600350289</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1649600350289</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"Diogo-T1\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -2,6 +2,7 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="8b0dcd76-f4b2-4401-b59f-7d8c67cba4d6" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/scala/ppm/Main.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/ppm/Main.scala" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -15,7 +16,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="T2" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -39,7 +40,10 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$/../../../Projetos de apoio/ProjetoPPM-master/ProjetoPPM-master" />
-    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
+    <property name="project.structure.last.edited" value="SDKs" />
+    <property name="project.structure.proportion" value="0.15" />
+    <property name="project.structure.side.proportion" value="0.2" />
+    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
   </component>
   <component name="RunManager" selected="Application.FxApp (1)">
     <configuration name="FxApp (1)" type="Application" factoryName="Application" temporary="true">
@@ -78,8 +82,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="Application.FxApp (1)" />
-        <item itemvalue="Application.FxApp" />
         <item itemvalue="Application.Main" />
+        <item itemvalue="Application.FxApp" />
+        <item itemvalue="Application.FxApp (1)" />
+        <item itemvalue="Application.FxApp" />
       </list>
     </recent_temporary>
   </component>
